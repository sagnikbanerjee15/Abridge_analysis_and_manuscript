#! /usr/bin/env python

from argparse import RawTextHelpFormatter
import argparse 
import logging
import os
import pprint
import sys
import re
import time
import multiprocessing
import random
import glob

def parseCommandLineArguments():
    parser = argparse.ArgumentParser(prog="abridge_reproduce_entire_analysis",description="Program will regenerate all the files, process them and also construct the graphs for publication. Please note that some of the data represents duration of execution and will not be reproducible. But the trend should hold true",formatter_class=RawTextHelpFormatter)
    required_named = parser.add_argument_group('Required arguments')
    optional_named = parser.add_argument_group('Optional arguments')
    
    ##################################################################################################
    # Required arguments
    ##################################################################################################
    required_named.add_argument("-md","--metadata",help="Enter the metadata file. The file format should be same as ListOfNCBI-SRASamplesForExperimentST.csv",required=True)
    required_named.add_argument("-odir","--output_directory",help="Enter the name of the output directory. all analysis will be stored here. Please make sure you have sufficient space on your disk to reproduce all the analysis",required=True)
    required_named.add_argument("--genome","-g",help="Enter the location of the genome",required=True)
    
    ##################################################################################################
    # Optional arguments
    ##################################################################################################
    optional_named.add_argument("--cpu","-n",help="Enter the number of CPUs. Please note that all alignments will be conducted using a single CPU. This argument will control how many parallel alignments can be lanuched", default=1)
    
    ##################################################################################################
    # Suppressed arguments
    ##################################################################################################
    parser.add_argument("--metadata_expanded","-metadata_expanded",help=argparse.SUPPRESS)
    parser.add_argument("--sra_list_to_be_downloaded","-sra_list_to_be_downloaded",help=argparse.SUPPRESS)
     
    return parser.parse_args()

def readMetadataFile(options):
    """
    Reads in the metadata information and restructrues the data
    """
    data = {}
    fhr=open(options.metadata,"r")
    for line in fhr:
        if "Accession" in line:continue
        Organism,Tissue,Layout,Assay_Type,Date_of_publication, Length, Accession,Bioproject,Number_of_reads_or_pairs,Replicate_information, Notes  = line.strip().split(",")
        if Assay_Type not in data:
            data[Assay_Type] = []
        data[Assay_Type].append([Organism,Tissue,Layout,Assay_Type,Date_of_publication, Length, Accession,Bioproject, Number_of_reads_or_pairs,Replicate_information, Notes])
    fhr.close()
    options.metadata_expanded = data
    
def downloadData(options):
    """
    Downloads the data from NCBI-SRA
    """
    options.sra_list_to_be_downloaded = f"{options.output_directory}/sra_list_to_be_downloaded"
    fhw = open(options.sra_list_to_be_downloaded,"w")
    for Assay_Type in options.metadata_expanded:
        for row in options.metadata_expanded[Assay_Type]:
            fhw.write(row[6] + "\n")
    fhw.close()
    
    cmd  = f"downloadAndDumpFastqFromSRA.py "
    cmd += f" --cpu {options.cpu} "
    cmd += f" --sra {options.sra_list_to_be_downloaded} "
    cmd += f" --output {options.output_directory}/raw_data "
    cmd += f" 1> {options.output_directory}/outputs/raw_data_download.output "
    cmd += f" 2> {options.output_directory}/errors/raw_data_download.error "
    os.system(cmd)
    
def main():
    commandLineArg=sys.argv
    if len(commandLineArg)==1:
        print("Please use the --help option to get usage information")
    options=parseCommandLineArguments()
    
    ##################################################################################################
    # Create output directory and subdirectories underneath
    ##################################################################################################
    create_these_directories = [options.output_directory,
                                f"{options.output_directory}/raw_data",
                                f"{options.output_directory}/star_alignments",
                                f"{options.output_directory}/star_index",
                                f"{options.output_directory}/compressed_files",
                                f"{options.output_directory}/decompressed_files",
                                f"{options.output_directory}/outputs",
                                f"{options.output_directory}/errors",
                                f"{options.output_directory}/final_output_files",
                                f"{options.output_directory}/final_output_files/graphs"]
    
    for d in create_these_directories:
        os.system(f"mkdir -p {d}")
    
    ##################################################################################################
    # Read in the metadata file
    ##################################################################################################
    readMetadataFile(options)
    
    ##################################################################################################
    # Downloading the raw data from NCBI
    ##################################################################################################
    downloadData(options)
    
    ##################################################################################################
    # Construct STAR index
    ##################################################################################################
    cmd  = "STAR "
    cmd += f" --runthreadN {options.cpu}"
    cmd += f" --genomeSAindexNbases 12 "
    cmd += f" --genomeDir {options.output_directory}/star_index "
    cmd += f" --genomeFastaFiles {options.genome}"
    if os.path.exists(f"{options.output_directory}/star_index/genomeParameters.txt")==False:
        os.system(cmd)
        
    ##################################################################################################
    # Merge read pairs to form one file
    ##################################################################################################
    for Assay_Type in options.metadata_expanded:
        for row in options.metadata_expanded[Assay_Type]:
            pair1_filename = f"{options.output_directory}/raw_data/{row[6]}_1.fastq"
            pair2_filename = f"{options.output_directory}/raw_data/{row[6]}_2.fastq"
            merged_filename = pair1_filename = f"{options.output_directory}/raw_data/{row[6]}.fastq"
            if os.path.exists(merged_filename)==True:continue
            fhw=open(merged_filename,"w")
            for fhr in [open(pair1_filename,"r") ,open(pair2_filename,"r")]:
                for line in fhr:
                    if line[0]=='@' and '/' in line:
                        line.replace('/','_')
                    fhw.write(line)
            fhw.close()
            
    ##################################################################################################
    # Prepare metadata for alignemnt
    # A single .csv file will be prepared for both SE and PE samples
    # Organism,Tissue,Layout,Assay_Type,Date_of_publication,Read_Length,SRA 
    # Organism,Tissue,Layout,Assay_Type,Date_of_publication, Length, Accession,Bioproject, Number_of_reads_or_pairs,Replicate_information, Notes]
    ##################################################################################################
    fhw = open(f"{options.output_directory}/metadata_for_alignment.csv","w")
    for Assay_Type in options.metadata_expanded:
        for row in options.metadata_expanded[Assay_Type]:
            fhw.write(",".join([row[0],
                              row[1],
                              row[2],
                              row[3],
                              row[4],
                              row[5],
                              row[6]  
                ])+"\n")
            
            fhw.write(",".join([row[0],
                              row[1],
                              "SE",
                              row[3],
                              row[4],
                              row[5],
                              row[6]  
                ])+"\n")
    fhw.close()
    
    ##################################################################################################
    # Map reads with STAR
    ##################################################################################################
    cmd  = "align_reads_using_STAR.py "
    cmd += f" --metadata f{options.output_directory}/metadata_for_alignment.csv "
    cmd += f" --output_directory {options.output_directory}/star_alignments "
    cmd += f" --star_genome_index {options.output_directory}/star_index "
    cmd += f" --input_location {options.output_directory}/raw_data "
    cmd += f" --cpu {options.cpu} "
    cmd += f" --num_times 10 "
    os.system(cmd)
    

if __name__ == "__main__":
    main()
    
    
    
    
    