#! /usr/bin/env python

from argparse import RawTextHelpFormatter
import argparse 
import logging
import os
import pprint
import sys
import re
import time
import multiprocessing
import random
import glob

def parseCommandLineArguments():
    parser = argparse.ArgumentParser(prog="abridge_reproduce_entire_analysis",description="Program will regenerate all the files, process them and also construct the graphs for publication. Please note that some of the data represents duration of execution and will not be reproducible. But the trend should hold true",formatter_class=RawTextHelpFormatter)
    required_named = parser.add_argument_group('Required arguments')
    optional_named = parser.add_argument_group('Optional arguments')
    
    ##################################################################################################
    # Required arguments
    ##################################################################################################
    required_named.add_argument("-md","--metadata",help="Enter the metadata file. The file format should be same as ListOfNCBI-SRASamplesForExperimentST.csv",required=True)
    required_named.add_argument("-odir","--output_directory",help="Enter the name of the output directory. all analysis will be stored here. Please make sure you have sufficient space on your disk to reproduce all the analysis",required=True)
    required_named.add_argument("--genome","-g",help="Enter the location of the genome",required=True)
    
    ##################################################################################################
    # Optional arguments
    ##################################################################################################
    optional_named.add_argument("--cpu","-n",help="Enter the number of CPUs. Please note that all alignments will be conducted using a single CPU. This argument will control how many parallel alignments can be lanuched", default=1)
    optional_named.add_argument("--num_times","-t",help="Enter the number of times you wish each process to execute. This will be handy in calculating the average time required for compression, decompression, retrieval and other operations", default = 5)
    optional_named.add_argument("--error_directory","-edir",help="Enter a directory where all error files will be stored. If nothing is specified then error files will be stored in the output directory",default=None)
    optional_named.add_argument("--temp_directory","-temp_dir",help="Enter a temporary directory. All files will be dumped in this directory to prevent the output directory to get crowded. Outputs and Error files will not be moved",default = None)
    
    ##################################################################################################
    # Suppressed arguments
    ##################################################################################################
    parser.add_argument("--metadata_expanded","-metadata_expanded",help=argparse.SUPPRESS)
    parser.add_argument("--sra_list_to_be_downloaded","-sra_list_to_be_downloaded",help=argparse.SUPPRESS)
    parser.add_argument("--logfilename","-logfilename",help=argparse.SUPPRESS)# Name of the logfile
     
    return parser.parse_args()

def readMetadataFile(options):
    """
    Reads in the metadata information and restructrues the data
    """
    data = {}
    fhr=open(options.metadata,"r")
    for line in fhr:
        if "Accession" in line:continue
        Organism,Tissue,Layout,Assay_Type,Date_of_publication, Length, Accession,Bioproject,Number_of_reads_or_pairs,Replicate_information, Notes  = line.strip().split(",")
        if Assay_Type not in data:
            data[Assay_Type] = []
        data[Assay_Type].append([Organism,Tissue,Layout,Assay_Type,Date_of_publication, Length, Accession,Bioproject, Number_of_reads_or_pairs,Replicate_information, Notes])
    fhr.close()
    options.metadata_expanded = data

def runMultipleCommandsInSeries(eachpinput):
    for cmd in eachpinput:
        if cmd=="":continue
        sys.stdout.flush()
        os.system(cmd)
    
   
def downloadData(options):
    """
    Downloads the data from NCBI-SRA
    """
    options.sra_list_to_be_downloaded = f"{options.output_directory}/sra_list_to_be_downloaded"
    fhw = open(options.sra_list_to_be_downloaded,"w")
    for Assay_Type in options.metadata_expanded:
        for row in options.metadata_expanded[Assay_Type]:
            fhw.write(row[6] + "\n")
    fhw.close()
    
    temp_raw_data_directory = f"{options.temp_directory}/raw_data"
    os.system(f"mkdir -p {temp_raw_data_directory}")
    
    fhw = open(f"{options.output_directory}/sra_list_to_be_downloaded_temp","w")
    fhr = open(options.sra_list_to_be_downloaded,"r")
    for line in fhr:
        sra = line.strip()
        if os.path.exists(f"{temp_raw_data_directory}/{sra}_1.fastq") == False or os.path.exists(f"{temp_raw_data_directory}/{sra}_2.fastq") == False:
            fhw.write(sra+"\n")
    fhw.close()
    fhr.close()
    
    cmd  = f"downloadAndDumpFastqFromSRA.py "
    cmd += f" --cpu {options.cpu} "
    cmd += f" --sra {options.output_directory}/sra_list_to_be_downloaded_temp "
    cmd += f" --output {options.output_directory}/raw_data "
    cmd += f" 1> {options.output_directory}/outputs/raw_data_download.output "
    cmd += f" 2> {options.output_directory}/errors/raw_data_download.error "
    os.system(cmd)
    
    # Move all files to the temporary directory
    fhr = open(options.sra_list_to_be_downloaded,"r")
    for line in fhr:
        sra = line.strip()
        cmd = f"mv {options.output_directory}/raw_data/{sra}* {temp_raw_data_directory}/ 2> /dev/null"
        os.system(cmd)
    fhr.close()
    
def configureLogger(options):
    if os.path.exists(options.logfilename)==True:
        os.system(f"rm {options.logfilename}")
    logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S',level=logging.DEBUG, filename=options.logfilename)

def runCommand(eachpinput):
    cmd,dummy = eachpinput
    os.system(cmd)

def mergeReadPairs(eachinput):
    options,sra=eachinput
    pair1_filename = f"{options.output_directory}/raw_data/{sra}_1.fastq"
    pair2_filename = f"{options.output_directory}/raw_data/{sra}_2.fastq"
    merged_filename = f"{options.output_directory}/raw_data/{sra}.fastq"
    if os.path.exists(merged_filename)==True:return
    fhw=open(merged_filename,"w")
    for fhr in [open(pair1_filename,"r") ,open(pair2_filename,"r")]:
        for line_num,line in enumerate(fhr):
            if line_num % 4 == 0 and line[0]=='@' and '/' in line:
                line = line.replace('/','_')
            fhw.write(line)
    fhw.close()

def main():
    commandLineArg=sys.argv
    if len(commandLineArg)==1:
        print("Please use the --help option to get usage information")
    options=parseCommandLineArguments()
    
    os.system(f"mkdir -p {options.output_directory}")
    options.logfilename = options.output_directory+"/progress.log"
    configureLogger(options)
    
    pool = multiprocessing.Pool(processes=int(options.cpu))
    ##################################################################################################
    # Create output directory and subdirectories underneath
    ##################################################################################################
    create_these_directories = [options.output_directory,
                                options.temp_directory,
                                f"{options.output_directory}/raw_data",
                                f"{options.output_directory}/alignments",
                                f"{options.output_directory}/star_index",
                                f"{options.output_directory}/abridge_compressed_files",
                                f"{options.output_directory}/abridge_decompressed_files",
                                f"{options.output_directory}/outputs",
                                f"{options.output_directory}/errors",
                                f"{options.output_directory}/final_output_files",
                                f"{options.output_directory}/final_output_files/graphs"]
    
    for d in create_these_directories:
        os.system(f"mkdir -p {d}")
    
    ##################################################################################################
    # Read in the metadata file
    ##################################################################################################
    readMetadataFile(options)
    logging.info(f"readMetadataFile() execution is complete")
    
    ##################################################################################################
    # Downloading the raw data from NCBI
    ##################################################################################################
    downloadData(options)
    logging.info(f"Data download from NCBI is complete")
    
    ##################################################################################################
    # Construct STAR index
    ##################################################################################################
    cmd  = "STAR "
    cmd += f" --runThreadN {options.cpu}"
    cmd += f" --genomeSAindexNbases 12 "
    cmd += f" --genomeDir {options.output_directory}/star_index "
    cmd += f" --genomeFastaFiles {options.genome}"
    cmd += f" --runMode genomeGenerate " 
    if os.path.exists(f"{options.output_directory}/star_index/genomeParameters.txt")==False:
        os.system(cmd)
        logging.info(f"STAR index generation is complete")
        
    ##################################################################################################
    # Prepare metadata for alignemnt
    # A single .csv file will be prepared for both SE and PE samples
    # Organism,Tissue,Layout,Assay_Type,Date_of_publication,Read_Length,SRA 
    # Organism,Tissue,Layout,Assay_Type,Date_of_publication, Length, Accession,Bioproject, Number_of_reads_or_pairs,Replicate_information, Notes]
    ##################################################################################################
    fhw = open(f"{options.output_directory}/metadata_for_alignment.csv","w")
    add_these_back_to_metadata_expanded = {}
    add_these_back_to_metadata_expanded["DNA-Seq"] = []
    for Assay_Type in options.metadata_expanded:
        add_these_back_to_metadata_expanded[Assay_Type] = []
        for row in options.metadata_expanded[Assay_Type]:
            fhw.write(",".join([row[0], #organism
                              row[1], #tissue
                              row[2], #Layout
                              row[3], #Assay_Type
                              row[4],
                              row[5],
                              row[6]  
                ])+"\n")
            
            fhw.write(",".join([row[0],
                              row[1],
                              "SE",
                              row[3],
                              row[4],
                              row[5],
                              row[6]  
                ])+"\n")
            add_these_back_to_metadata_expanded[Assay_Type].append([row[0],row[1],"SE",row[3],row[4],row[5],row[6]])
    fhw.close()
    
    for Assay_Type in options.metadata_expanded:
        options.metadata_expanded[Assay_Type].extend(add_these_back_to_metadata_expanded[Assay_Type])
    logging.info(f"Metadata preparation for alignment is complete")
    
    ##################################################################################################
    # Map reads with STAR and BWA
    ##################################################################################################
    cmd  = "align_reads_using_STAR_and_BWA.py "
    cmd += f" --metadata {options.output_directory}/metadata_for_alignment.csv "
    cmd += f" --output_directory {options.output_directory}/alignments "
    cmd += f" --star_genome_index {options.output_directory}/star_index "
    cmd += f" --hisat2_index {options.output_directory}/hisat2_index "
    cmd += f" --input_location {options.output_directory}/raw_data "
    cmd += f" --cpu {options.cpu} "
    cmd += f" --num_times {options.num_times} "
    cmd += f" --temp_directory {options.temp_directory} "
    cmd += f" 1> {options.output_directory}/outputs/alignment.output "
    cmd += f" 2> {options.output_directory}/errors/alignment.error "
    os.system(cmd)
    logging.info(f"Aligning reads with STAR is complete")
    
    ##################################################################################################
    # Merge read libraries to create larger sized datasets
    ##################################################################################################
    
    
    # Reformat the Data Structure
    metadata = { "SE": {} , "PE" : {} }
    for Assay_Type in options.metadata_expanded:
        for row in options.metadata_expanded[Assay_Type]:
            layout = row[2]
            Assay_Type = row[3] # RNA-Assay_Type, DNA-Assay_Type etc.
            SRA = row[6]
            if Assay_Type not in metadata[layout]:
                metadata[layout][Assay_Type] = []
            metadata[layout][Assay_Type].append(SRA)
    """    
    # Create new data by merging 2 or more samples together
    add_these_back_to_metadata_expanded = {}
    for layout in metadata:
        for Assay_Type in metadata[layout]:
            i = 1
            new_merged_SRA = metadata[layout][Assay_Type][0]
            alignment_bamfilename_in_temp = f"{options.temp_directory}/alignments/{new_merged_SRA}_{layout}.bam"
            
            # Copy the alignment file from temp directory to main directory
            cmd = f"cp {alignment_bamfilename_in_temp} {options.output_directory}/alignments/ "
            os.system(cmd)
            
            alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.bam"
            while i < len(metadata[layout][Assay_Type]):
                alignment_bamfilename_in_temp = f"{options.temp_directory}/alignments/{metadata[layout][Assay_Type][i]}_{layout}.bam"
                
                cmd = f"cp {alignment_bamfilename_in_temp} {options.output_directory}/alignments/ "
                os.system(cmd)
            
                previous_merged_RNA_bamfilename = new_merged_SRA
                previous_alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{previous_merged_RNA_bamfilename}_{layout}.bam"
                previous_alignment_samfilename_in_main = f"{options.output_directory}/alignments/{previous_merged_RNA_bamfilename}_{layout}.sam"
                new_merged_SRA += "-" + metadata[layout][Assay_Type][i]
                new_alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.bam"
                new_alignment_samfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.sam"
                
                cmd  = f" samtools merge "
                cmd += f" -@ {options.cpu} "
                cmd += f" {new_alignment_bamfilename_in_main} {previous_alignment_bamfilename_in_main} {options.output_directory}/alignments/{metadata[layout][Assay_Type][i]}_{layout}.bam "
                os.system(cmd)
                
                os.system(f"mv {previous_alignment_bamfilename_in_main} {options.temp_directory}/alignments/")
                
                cmd  = f"samtools view "
                cmd += f" -@ {options.cpu} "
                cmd += f" {new_alignment_bamfilename_in_main} > {new_alignment_samfilename_in_main} "
                os.system(cmd)
                
                os.system(f"rm {options.output_directory}/alignments/{metadata[layout][Assay_Type][i]}_{layout}.bam")
                options.metadata_expanded[Assay_Type].append(["dummy","dummy",layout,Assay_Type,"dummy","dummy",new_merged_SRA]) 
                i += 1
    
    os.system(f"mv {options.output_directory}/alignments/*bam {options.temp_directory}/alignments/")
    os.system(f"mv {options.output_directory}/alignments/*sam {options.temp_directory}/alignments/")
    """
    
    
    for layout in metadata:
        for Assay_Type in metadata[layout]:
            i = 1
            new_merged_SRA = metadata[layout][Assay_Type][0]
            alignment_bamfilename_in_temp = f"{options.temp_directory}/alignments/{new_merged_SRA}_{layout}.bam"
            alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.bam"
            
            while i < len(metadata[layout][Assay_Type]):
                alignment_bamfilename_in_temp = f"{options.temp_directory}/alignments/{metadata[layout][Assay_Type][i]}_{layout}.bam"
                previous_merged_RNA_bamfilename = new_merged_SRA
                previous_alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{previous_merged_RNA_bamfilename}_{layout}.bam"
                previous_alignment_samfilename_in_main = f"{options.output_directory}/alignments/{previous_merged_RNA_bamfilename}_{layout}.sam"
                new_merged_SRA += "-" + metadata[layout][Assay_Type][i]
                new_alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.bam"
                new_alignment_samfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.sam"
                options.metadata_expanded[Assay_Type].append(["dummy","dummy",layout,Assay_Type,"dummy","dummy",new_merged_SRA]) 
                i += 1
    
    for layout in metadata:
        for Assay_Type in metadata[layout]:
            i = 1
            new_merged_SRA = metadata[layout][Assay_Type][0]
            alignment_bamfilename_in_temp = f"{options.temp_directory}/{new_merged_SRA}_{layout}.bam"
            alignment_bamfilename_in_main = f"{options.output_directory}/alignments/{new_merged_SRA}_{layout}.bam"
            while i < len(metadata[layout][Assay_Type]):
                new_merged_SRA += "-" + metadata[layout][Assay_Type][i]
                options.metadata_expanded[Assay_Type].append(["dummy","dummy",layout,Assay_Type,"dummy","dummy",new_merged_SRA]) 
                i += 1
    
    CPU = 72
    pool = multiprocessing.Pool(processes=int(CPU))
    all_commands = []
    
    for iteration in range(int(options.num_times)):
        for Assay_Type in options.metadata_expanded:
            for row in options.metadata_expanded[Assay_Type]:
                sra = row[6]
                layout = row[2]
                alignment_samfilename_in_temp = f"{options.temp_directory}/alignments/{sra}_{layout}.sam"
                if os.path.exists(alignment_samfilename_in_temp) == False : continue
                alignment_samfilename = f"{options.output_directory}/alignments/{sra}_{layout}.sam"
                cmd = f"cp {alignment_samfilename_in_temp} {alignment_samfilename}"
                os.system(cmd)
                logging.info(f"Running command - {cmd}")
                
                
                ##################################################################################################
                # Compress alignments with Abridge
                ##################################################################################################
                
                os.system(f"mkdir {options.temp_directory}/abridge_compressed_files")
                
                #################################################################################################################
                # 1. compress_save_all_quality_scores_save_exact_quality_scores
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory  {options.error_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    cmd += f" --save_all_quality_scores "
                    cmd += f" --save_exact_quality_scores "
                    cmd += f" --level {level}"
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration}.error " 
                    print(f"{options.temp_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge")
                    print(os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge"))
                    sys.stdout.flush()
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        #os.system(cmd)
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                    
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_exact_quality_scores_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                        all_commands[-1].append(cmd)
                
                #################################################################################################################
                # 2. compress_save_all_quality_scores_save_approx_quality_scores
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_approx_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory {options.error_directory}/abridge/compress_save_all_quality_scores_save_approx_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --save_all_quality_scores "
                    cmd += f" --level {level} "
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_save_all_quality_scores_save_approx_quality_scores_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_save_all_quality_scores_save_approx_quality_scores_level_{level}_{sra}_{layout}_{iteration}.error " 
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_approx_quality_scores_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        #os.system(cmd) 
                        
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                    
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_save_all_quality_scores_save_approx_quality_scores_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                        
                        all_commands[-1].append(cmd)
                    
                #################################################################################################################
                # 3. compress_save_qual_scores_only_for_indels_and_mismatches
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_save_qual_scores_only_for_indels_and_mismatches_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory {options.error_directory}/abridge/compress_save_qual_scores_only_for_indels_and_mismatches_level_2_{sra}_{layout}_{iteration} "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --level {level} "
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_save_qual_scores_only_for_indels_and_mismatches_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_save_qual_scores_only_for_indels_and_mismatches_level_{level}_{sra}_{layout}_{iteration}.error " 
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_save_qual_scores_only_for_indels_and_mismatches_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        #os.system(cmd)
                        
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                    
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_save_qual_scores_only_for_indels_and_mismatches_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                        
                        all_commands[-1].append(cmd)
                
                #################################################################################################################
                # 4. compress_ignore_quality_scores
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory {options.error_directory}/abridge/compress_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --level {level} " 
                    cmd += f" --ignore_quality_scores "
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration}.error " 
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        os.system(cmd)
                        
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                    
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                    
                        all_commands[-1].append(cmd)
                    
                #################################################################################################################
                # 5. compress_ignore_soft_clippings_ignore_mismatches
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory {options.error_directory}/abridge/compress_ignore_soft_clippings_ignore_mismatches_level_{level}_{sra}_{layout}_{iteration} "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --level {level} "
                    cmd += f" --ignore_soft_clippings "
                    cmd += f" --ignore_mismatches " 
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_ignore_soft_clippings_ignore_mismatches_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_ignore_soft_clippings_ignore_mismatches_level_{level}_{sra}_{layout}_{iteration}.error " 
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        #os.system(cmd)
                        
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                        
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                        
                        all_commands[-1].append(cmd)
                    
                
                #################################################################################################################
                # 6. compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory {options.error_directory}/abridge/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration} "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --level {level} "
                    cmd += f" --ignore_quality_scores "
                    cmd += f" --ignore_soft_clippings "
                    cmd += f" --ignore_mismatches " 
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration}.error " 
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        #os.system(cmd)
                        
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                    
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                        
                        all_commands[-1].append(cmd)
                
                
                #################################################################################################################
                # 7. compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads
                #################################################################################################################
                for level in [1,2,3]:
                    cmd  = f"(/usr/bin/time --verbose abridge "
                    cmd += f" --compress "
                    cmd += f" --cpu 1 "
                    cmd += f" --genome {options.genome} "
                    cmd += f" --inputsamfilenames {alignment_samfilename} "
                    cmd += f" --output_directory {options.output_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads_level_{level}_{sra}_{layout}_{iteration} "
                    #cmd += f" --error_directory {options.error_directory}/abridge/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads_level_{level}_{sra}_{layout}_{iteration} "
                    cmd += f" --keep_intermediate_error_files "
                    cmd += f" --level {level} " 
                    cmd += f" --ignore_quality_scores "
                    cmd += f" --ignore_soft_clippings "
                    cmd += f" --ignore_mismatches " 
                    cmd += f" --ignore_unmapped_reads "
                    cmd += ")"
                    cmd += f" 1> {options.output_directory}/outputs/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads_level_{level}_{sra}_{layout}_{iteration}.output "
                    cmd += f" 2> {options.output_directory}/errors/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads_level_{level}_{sra}_{layout}_{iteration}.error " 
                    if os.path.exists(f"{options.temp_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads_level_{level}_{sra}_{layout}_{iteration}/{sra}_{layout}.abridge") == False: 
                        logging.info(f"Running command - {cmd}")
                        #os.system(cmd)
                        
                        all_commands.append([])
                        all_commands[-1].append(cmd)
                    
                        cmd = f"mv {options.output_directory}/abridge_compressed_files/compress_ignore_soft_clippings_ignore_mismatches_ignore_quality_scores_ignore_unmapped_reads_level_{level}_{sra}_{layout}_{iteration} {options.temp_directory}/abridge_compressed_files"
                        #os.system(cmd)
                        
                        all_commands[-1].append(cmd)
                
                continue
                
                
                
                
                
                
                
                
                
                
                #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                #################################################################################################################
                #
                #                                            OTHER COMPRESSORS
                #
                #################################################################################################################
                #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                
                """
                #################################################################################################################
                # ALICO - DECIDED TO NOT EXECUTE GIVING SEGMENTATION FAULTS. NO HELP FROM AUTHORS
                # GENECOMP - Same type of software developed by the same group of people has the same problems
                #################################################################################################################
                os.system(f"{options.output_directory}/alico_compressed_files")
                
                cmd  = f"(/usr/bin/time --verbose  "
                cmd += f" /project/maizegdb/sagnik/softwares/alico/build_dir/SAMStreamer "
                cmd += f" -u " # to compress
                cmd += f" " # No CALQ mode 
                cmd += f" {alignment_samfilename}"
                cmd += f" {options.output_directory}/alico_compressed_files/compress_alico_no_calq_{sra}_{layout}_{iteration}.alico "
                cmd += f" {options.genome} "
                cmd += f")"
                cmd += f" 1> {options.output_directory}/outputs/compress_alico_no_calq_{sra}_{layout}_{iteration}.output "
                cmd += f" 2> {options.output_directory}/errors/compress_alico_no_calq_{sra}_{layout}_{iteration}.error "
                if os.path.exists(f"{options.output_directory}/alico_compressed_files/compress_alico_no_calq_{sra}_{layout}_{iteration}.alico")==False:
                    logging.info(f"Running command - {cmd}")
                    os.system(cmd)
                    
                cmd  = f"(/usr/bin/time --verbose  "
                cmd += f" /project/maizegdb/sagnik/softwares/alico/build_dir/SAMStreamer "
                cmd += f" -u " # to compress
                cmd += f" -q " # Yes CALQ mode 
                cmd += f" {alignment_samfilename}"
                cmd += f" {options.output_directory}/alico_compressed_files/compress_alico_yes_calq_{sra}_{layout}_{iteration}.alico "
                cmd += f" {options.genome} "
                cmd += f")"
                cmd += f" 1> {options.output_directory}/outputs/compress_alico_yes_calq_{sra}_{layout}_{iteration}.output "
                cmd += f" 2> {options.output_directory}/errors/compress_alico_yes_calq_{sra}_{layout}_{iteration}.error "
                if os.path.exists(f"{options.output_directory}/alico_compressed_files/compress_alico_yes_calq_{sra}_{layout}_{iteration}.alico")==False:
                    logging.info(f"Running command - {cmd}")
                    os.system(cmd)
                """
                """
                #################################################################################################################
                # BOILER
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/boiler_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/boiler_compressed_files")
                
                cmd  = f"(/usr/bin/time --verbose "
                cmd += f" pypy /project/maizegdb/sagnik/softwares/boiler/boiler.py "
                cmd += f" compress "
                #cmd += f" --frag-len-cutoff 1000 " # Cant have both frag-len-cutoff and frag-len-z-cutoff 
                cmd += f" --frag-len-z-cutoff 0.125 "
                cmd += f" -v "
                cmd += f" {alignment_samfilename} "
                cmd += f" {options.output_directory}/boiler_compressed_files/compress_boiler_{sra}_{layout}_{iteration}.boiler "
                cmd += f") "
                cmd += f" 1> {options.output_directory}/outputs/compress_boiler_{sra}_{layout}_{iteration}.output "
                cmd += f" 2> {options.output_directory}/errors/compress_boiler_{sra}_{layout}_{iteration}.error "
                if os.path.exists(f"{options.temp_directory}/boiler_compressed_files/compress_boiler_{sra}_{layout}_{iteration}.boiler")==False:
                    logging.info(f"Running command - {cmd}")
                    os.system(cmd)
                    
                    cmd=f"mv {options.output_directory}/boiler_compressed_files/compress_boiler_{sra}_{layout}_{iteration}.boiler {options.temp_directory}/boiler_compressed_files/"
                    os.system(cmd)
                """
                #################################################################################################################
                # QUIP
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/quip_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/quip_compressed_files")
                
                cmd  = f"(/usr/bin/time --verbose "
                cmd += f" /project/maizegdb/sagnik/softwares/quip/src/quip "
                cmd += f" --input=sam "
                cmd += f" --force "
                cmd += f" --stdout "
                cmd += f" -r {options.genome} "
                cmd += f" {alignment_samfilename} "
                cmd += f") "
                cmd += f" 1> {options.output_directory}/quip_compressed_files/compress_quip_{sra}_{layout}_{iteration}.quip "
                cmd += f" 2> {options.output_directory}/errors/compress_quip_{sra}_{layout}_{iteration}.error "
                if os.path.exists(f"{options.temp_directory}/quip_compressed_files/compress_quip_{sra}_{layout}_{iteration}.quip")==False:
                    logging.info(f"Running command - {cmd}")
                    os.system(cmd)
                    
                    cmd=f"mv {options.output_directory}/quip_compressed_files/compress_quip_{sra}_{layout}_{iteration}.quip {options.temp_directory}/quip_compressed_files/"
                    os.system(cmd)
                
                
                #################################################################################################################
                # DEEZ
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/deez_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/deez_compressed_files")

                for lossy in [0,50,99]:
                    for encodequality in ["1","2"]:
                        cmd  = f"(/usr/bin/time --verbose "
                        cmd += f" /project/maizegdb/sagnik/softwares/deez/deez "
                        cmd += f" -r {options.genome}"
                        cmd += f" --threads 1 "
                        cmd += f" --force "
                        cmd += f" --quality {encodequality}"
                        cmd += f" --lossy {lossy} "
                        cmd += f" {alignment_samfilename} "
                        cmd += f" -o {options.output_directory}/deez_compressed_files/compress_deez_lossypercent_{lossy}_mode_{encodequality}_{sra}_{layout}_{iteration}.deez  "
                        cmd += f") "
                        cmd += f" 1> {options.output_directory}/outputs/compress_deez_lossypercent_{lossy}_mode_{encodequality}_{sra}_{layout}_{iteration}.output "
                        cmd += f" 2> {options.output_directory}/errors/compress_deez_lossypercent_{lossy}_mode_{encodequality}_{sra}_{layout}_{iteration}.error "
                        if os.path.exists(f"{options.temp_directory}/deez_compressed_files/compress_deez_lossypercent_{lossy}_mode_{encodequality}_{sra}_{layout}_{iteration}.deez")==False:
                            logging.info(f"Running command - {cmd}")
                            os.system(cmd)
                
                            cmd=f"mv {options.output_directory}/deez_compressed_files/compress_deez_lossypercent_{lossy}_mode_{encodequality}_{sra}_{layout}_{iteration}.deez {options.temp_directory}/deez_compressed_files"
                            os.system(cmd)
                
                #################################################################################################################
                # SAMCOMP
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/samcomp_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/samcomp_compressed_files")
                
                cmd  = f"(/usr/bin/time --verbose "
                cmd += f" /project/maizegdb/sagnik/softwares/sam_comp-0.10/sam_comp "
                cmd += f" -r {options.genome} "
                cmd += f" < {alignment_samfilename}"
                cmd += f")"
                cmd += f" 1> {options.output_directory}/samcomp_compressed_files/compress_samcomp_{sra}_{layout}_{iteration}.zam "
                cmd += f" 2> {options.output_directory}/errors/compress_samcomp_{sra}_{layout}_{iteration}.error "
                #if os.path.exists(f"{options.output_directory}/samcomp_compressed_files/compress_samcomp_{sra}_{layout}_{iteration}.zam")==False:
                if os.path.exists(f"{options.temp_directory}/samcomp_compressed_files/compress_samcomp_{sra}_{layout}_{iteration}.zam")==False:
                    logging.info(f"Running command - {cmd}")
                    os.system(cmd)
                    cmd=f"mv {options.output_directory}/samcomp_compressed_files/compress_samcomp_{sra}_{layout}_{iteration}.zam {options.temp_directory}/samcomp_compressed_files"
                    os.system(cmd)
                    
                #################################################################################################################
                # GENOZIP
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/genozip_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/genozip_compressed_files")
                
                for compression in ["best","fast"]:
                    for optimize in ["","optimize"]:
                        
                        cmd  = f"(/usr/bin/time --verbose "
                        cmd += f" genozip "
                        cmd += f" --force"
                        cmd += f" --{compression} "
                        if optimize != "":
                            cmd += f" --{optimize} "
                        cmd += f" -o {options.output_directory}/genozip_compressed_files/compress_genozip_optimize_{optimize}_compression_{compression}_{sra}_{layout}_{iteration}.genozip "
                        cmd += f" -@ 1" # Single threaded
                        cmd += f" --reference /project/maizegdb/sagnik/data/ARATH/genome/Arabidopsis_thaliana.TAIR10.dna.toplevel.ref.genozip " # Reference fasta
                        cmd += f" {alignment_samfilename}"
                        cmd += f")"
                        cmd += f" 1> {options.output_directory}/outputs/compress_genozip_optimize_{optimize}_compression_{compression}_{sra}_{layout}_{iteration}.output "
                        cmd += f" 2> {options.output_directory}/errors/compress_genozip_optimize_{optimize}_compression_{compression}_{sra}_{layout}_{iteration}.error "
                        if os.path.exists(f"{options.temp_directory}/genozip_compressed_files/compress_genozip_optimize_{optimize}_compression_{compression}_{sra}_{layout}_{iteration}.genozip")==False:
                            logging.info(f"Running command - {cmd}")
                            os.system(cmd)
                            cmd=f"mv {options.output_directory}/genozip_compressed_files/compress_genozip_optimize_{optimize}_compression_{compression}_{sra}_{layout}_{iteration}.genozip {options.temp_directory}/genozip_compressed_files"
                            os.system(cmd)
                 
                #################################################################################################################
                # CSAM
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/csam_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/csam_compressed_files")
                
                for q in [0,1,2]:
                    for m in [0,1,2]:
                        cmd  = f"(/usr/bin/time --verbose "
                        cmd += f"  /project/maizegdb/sagnik/softwares/libCSAM/CompressSAM  "
                        cmd += f" {alignment_samfilename} "
                        cmd += f" -q {q} " # Lossless
                        cmd += f" -m {m} " # ASCII mode
                        cmd += f")"
                        cmd += f" 1> {options.output_directory}/outputs/compress_csam_q_{q}_m_{m}_{sra}_{layout}_{iteration}.output "
                        cmd += f" 2> {options.output_directory}/errors/compress_csam_q_{q}_m_{m}_{sra}_{layout}_{iteration}.error "
                        
                        if os.path.exists(f"{options.temp_directory}/csam_compressed_files/compress_csam_q_{q}_m_{m}_{sra}_{layout}_{iteration}.csam")==False:
                            logging.info(f"Running command - {cmd}")
                            os.system(cmd)
                            
                            # Rename the compressed file
                            cmd=f"mv {alignment_samfilename}.csam {options.output_directory}/csam_compressed_files/compress_csam_q_{q}_m_{m}_{sra}_{layout}_{iteration}.csam "
                            os.system(cmd)
                            cmd=f"mv {options.output_directory}/csam_compressed_files/compress_csam_q_{q}_m_{m}_{sra}_{layout}_{iteration}.csam {options.temp_directory}/csam_compressed_files"
                            os.system(cmd)
                """
                #################################################################################################################
                # NGC
                #################################################################################################################
                os.system(f"mkdir -p {options.output_directory}/ngc_compressed_files")
                os.system(f"mkdir -p {options.temp_directory}/ngc_compressed_files")
                
                for compression in ["best",""]:
                    for unmappedreads in ["preserveUnmappedReads",""]:
                        for qval_encoding in ["qvalRleEncoding",""]:
                            cmd  = f"(/usr/bin/time --verbose "
                            cmd += f"  java -jar -Xmx4G /project/maizegdb/sagnik/softwares/ngc-core-0.0.1-standalone.jar compress  "
                            if compression!="":
                                cmd += f" -{compression} "
                            cmd += f" -i {alignment_samfilename}"
                            cmd += f" -o {options.output_directory}/ngc_compressed_files/compress_ngc_compression_{compression}_unmappedreads_{unmappedreads}_qvalencoding_{qval_encoding}_{sra}_{layout}_{iteration}.ngc "
                            if unmappedreads!="":
                                cmd += f" -{unmappedreads} "
                            if qval_encoding!="":
                                cmd += f" -{qval_encoding} "
                            cmd += f" -truncateNames "
                            cmd += f" -truncateOptionalFields "
                            cmd += f" -r {options.genome} "
                            cmd += f")"
                            cmd += f" 1> {options.output_directory}/outputs/compress_ngc_compression_{compression}_unmappedreads_{unmappedreads}_qvalencoding_{qval_encoding}_{sra}_{layout}_{iteration}.output "
                            cmd += f" 2> {options.output_directory}/errors/compress_ngc_compression_{compression}_unmappedreads_{unmappedreads}_qvalencoding_{qval_encoding}_{sra}_{layout}_{iteration}.error "
                            if os.path.exists(f"{options.temp_directory}/ngc_compressed_files/compress_ngc_compression_{compression}_unmappedreads_{unmappedreads}_qvalencoding_{qval_encoding}_{sra}_{layout}_{iteration}.ngc")==False:
                                logging.info(f"Running command - {cmd}")
                                os.system(cmd)
                                
                                cmd = f"mv {options.output_directory}/ngc_compressed_files/compress_ngc_compression_{compression}_unmappedreads_{unmappedreads}_qvalencoding_{qval_encoding}_{sra}_{layout}_{iteration}.ngc {options.temp_directory}/ngc_compressed_files "
                                os.system(cmd)
                    
                 """   
                #os.system(f"rm -f {alignment_samfilename}")
    
    print(len(all_commands))
    print([len(each_row) for each_row in all_commands])
    #pool.map(runMultipleCommandsInSeries,all_commands)         
    return        
    ##################################################################################################
    # Decompress alignments with Abridge
    ##################################################################################################
    for iteration in range(int(options.num_times)):
        for Assay_Type in options.metadata_expanded:
            for row in options.metadata_expanded[Assay_Type]:
                sra = row[6]
                layout = row[2]
                alignment_samfilename = f"{options.output_directory}/alignments/{sra}_{layout}.sam"
            
                cmd  = f"(/usr/bin/time --verbose abridge "
                cmd += f" --decompress "
                cmd += f" --cpu 1 "
                cmd += f" --genome {options.genome} "
                cmd += f" --inputabrfilenames {options.output_directory}/abridge_compressed_files/{iteration}/{sra}_{layout}.abridge.br "
                cmd += f" --output_directory {options.output_directory}/abridge_decompressed_files/{iteration} "
                #cmd += f" --error_directory {options.error_directory}/abridge/{iteration} "
                cmd += f" --keep_intermediate_error_files "
                cmd += ")"
                cmd += f" 1> {options.output_directory}/outputs/{sra}_{iteration}_{layout}_decompress.output "
                cmd += f" 2> {options.output_directory}/errors/{sra}_{iteration}_{layout}_decompress.error " 
                if os.path.exists(f"{options.output_directory}/abridge_compressed_files/{iteration}/{sra}_{layout}.decompress.sam") == True : continue
                logging.info(f"Running command - {cmd}")
                os.system(cmd)
    

if __name__ == "__main__":
    main()
    
    
    
    
    